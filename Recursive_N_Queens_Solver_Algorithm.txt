Algorithm recursive_n_queens_solver(number_of_queens, current_row, queens, solutions, times):
Input:  integer number_of_queens
        integer current_row
        by reference queens is one dimensional array of type integer
        by reference solutions is dimensional array of type array
        by reference times is one dimensional array of type of time
output: 2 dimensional array contains
            updated array solutions have all solutions
            updated array times have all the times taken to find each solution

    Let attacked be boolean
    Let previous_row be integer
    // for current row examin the positions column by column
    for column ← 0 to number_of_queens -1 do
        attacked ← False
        // check if current position attacked by upper queens
        previous_row ← 0
        while previous_row < current_row and (not attacked) do
            if (column = queens[previous_row] or
                    current_row + queens[previous_row] = previous_row + column or
                    current_row - queens[previous_row] = previous_row - column) then
                // if any condition is true then this position attacked
                attacked ← True
            previous_row ← previous + 1
        // if free position found,
        if not attacked then
            // save current queen position as possible solution
            queens[current_row] ← column
            // if current row is last row then save as solution
            if current_row = number_of_queens - 1 then
                solutions.append(queens)
                times.append(clock)
            // if current row is not last row then examin next row recursively
            else
                recursive_n_queens_solver(number_of_queens,current_row + 1, queens, solutions, times)
    return (solutions, times)